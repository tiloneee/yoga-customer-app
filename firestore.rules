rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    function isInstructor() {
      return isAuthenticated() && request.auth.token.instructor == true;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    function isValidBooking() {
      return request.resource.data.userId == request.auth.uid &&
             request.resource.data.bookingStatus in ['confirmed', 'waitlisted', 'cancelled', 'completed', 'no-show', 'refunded'] &&
             request.resource.data.paymentStatus in ['pending', 'paid', 'refunded', 'failed', 'cancelled'] &&
             request.resource.data.amount > 0;
    }
    
    function isValidClassInstance() {
      return request.resource.data.maxCapacity > 0 &&
             request.resource.data.currentBookings >= 0 &&
             request.resource.data.availableSpots >= 0 &&
             request.resource.data.price >= 0 &&
             request.resource.data.startTime < request.resource.data.endTime;
    }
    
    function isValidCourse() {
      return request.resource.data.duration > 0 &&
             request.resource.data.maxCapacity > 0 &&
             request.resource.data.price >= 0 &&
             request.resource.data.rating >= 0 &&
             request.resource.data.rating <= 5;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // User profiles subcollection
    match /users/{userId}/profiles/{profileId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // User stats subcollection
    match /users/{userId}/stats/{statId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
    }

    // Courses collection
    match /courses/{courseId} {
      allow read: if true; // Public read access
      allow create: if isAdmin() || isInstructor();
      allow update: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Course categories collection
    match /courseCategories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // Course reviews subcollection
    match /courses/{courseId}/reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAdmin() || (isValidUser() && resource.data.userId == request.auth.uid);
    }

    // Class instances collection
    match /classInstances/{instanceId} {
      allow read: if true; // Public read access
      allow create: if isAdmin() || isInstructor();
      allow update: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Class instance reviews subcollection
    match /classInstances/{instanceId}/reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAdmin() || (isValidUser() && resource.data.userId == request.auth.uid);
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isOwner(resource.data.userId) || isAdmin() || 
                  (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow create: if isValidUser() && isValidBooking();
      allow update: if isOwner(resource.data.userId) || isAdmin() || 
                    (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Booking history subcollection
    match /bookings/{bookingId}/history/{historyId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Booking payments subcollection
    match /bookings/{bookingId}/payments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Instructors collection
    match /instructors/{instructorId} {
      allow read: if true; // Public read access
      allow create: if isAdmin();
      allow update: if isAdmin() || (isInstructor() && request.auth.uid == instructorId);
      allow delete: if isAdmin();
    }

    // Locations collection
    match /locations/{locationId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }

    // Packages collection
    match /packages/{packageId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // Package bookings collection
    match /packageBookings/{packageBookingId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Waitlist collection
    match /waitlist/{waitlistId} {
      allow read: if isOwner(resource.data.userId) || isAdmin() || 
                  (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin() || isInstructor();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Analytics collection (admin only)
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }

    // Settings collection (admin only)
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }

    // User favorites subcollection
    match /users/{userId}/favorites/{favoriteId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // User preferences subcollection
    match /users/{userId}/preferences/{preferenceId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Course schedules subcollection
    match /courses/{courseId}/schedules/{scheduleId} {
      allow read: if true; // Public read access
      allow write: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
    }

    // Class instance availability subcollection
    match /classInstances/{instanceId}/availability/{availabilityId} {
      allow read: if true; // Public read access
      allow write: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
    }

    // Booking receipts subcollection
    match /bookings/{bookingId}/receipts/{receiptId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Instructor schedules subcollection
    match /instructors/{instructorId}/schedules/{scheduleId} {
      allow read: if true; // Public read access
      allow write: if isAdmin() || (isInstructor() && request.auth.uid == instructorId);
    }

    // Course images subcollection
    match /courses/{courseId}/images/{imageId} {
      allow read: if true; // Public read access
      allow write: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
    }

    // User booking history subcollection
    match /users/{userId}/bookingHistory/{historyId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Waitlist promotions subcollection
    match /waitlist/{waitlistId}/promotions/{promotionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Notification templates (admin only)
    match /notificationTemplates/{templateId} {
      allow read, write: if isAdmin();
    }

    // System logs (admin only)
    match /systemLogs/{logId} {
      allow read, write: if isAdmin();
    }

    // Backup data (admin only)
    match /backups/{backupId} {
      allow read, write: if isAdmin();
    }
  }
}